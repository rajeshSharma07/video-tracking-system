{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Video-Progress-Tracker-main\\\\video-progress-frontend-main\\\\src\\\\components\\\\video\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = ({\n  percentage,\n  intervals,\n  duration,\n  currentTime\n}) => {\n  _s();\n  const [displayPercentage, setDisplayPercentage] = useState(0);\n  const [realTimeProgress, setRealTimeProgress] = useState(0);\n\n  // Update display percentage with animation\n  useEffect(() => {\n    setDisplayPercentage(percentage || 0);\n  }, [percentage]);\n\n  // Update real-time progress when currentTime changes\n  useEffect(() => {\n    if (currentTime && duration) {\n      const realTimePercentage = currentTime / duration * 100;\n      setRealTimeProgress(realTimePercentage);\n    }\n  }, [currentTime, duration]);\n\n  // Convert percentage to width style\n  const progressStyle = {\n    width: `${displayPercentage}%`,\n    transition: 'width 0.5s ease-in-out'\n  };\n\n  // Real-time progress indicator style\n  const realTimeStyle = {\n    position: 'absolute',\n    left: 0,\n    width: `${realTimeProgress}%`,\n    height: '100%',\n    backgroundColor: 'rgba(16, 185, 129, 0.7)',\n    // Green color\n    borderRadius: '5px',\n    transition: 'width 0.1s linear',\n    zIndex: 2\n  };\n\n  // Generate segments for watched intervals\n  const generateSegments = () => {\n    if (!intervals || intervals.length === 0 || !duration) {\n      return null;\n    }\n    console.log('Generating segments for intervals:', intervals);\n    return intervals.map((interval, index) => {\n      if (typeof interval.start !== 'number' || typeof interval.end !== 'number') {\n        console.error('Invalid interval:', interval);\n        return null;\n      }\n      const startPercent = interval.start / duration * 100;\n      const widthPercent = (interval.end - interval.start + 1) / duration * 100;\n      console.log(`Segment ${index}: start=${startPercent}%, width=${widthPercent}%`);\n      const segmentStyle = {\n        position: 'absolute',\n        left: `${startPercent}%`,\n        width: `${widthPercent}%`,\n        height: '100%',\n        backgroundColor: 'rgba(63, 81, 181, 0.5)',\n        borderRadius: '5px',\n        zIndex: 1\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: segmentStyle\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n    }).filter(Boolean);\n  };\n\n  // Format time from seconds to MM:SS\n  const formatTime = seconds => {\n    if (typeof seconds !== 'number') return '00:00';\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      style: {\n        position: 'relative',\n        height: '10px',\n        backgroundColor: '#e0e0e0',\n        borderRadius: '5px',\n        overflow: 'hidden',\n        margin: '1rem 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-fill\",\n        style: {\n          ...progressStyle,\n          height: '100%',\n          backgroundColor: '#3f51b5',\n          borderRadius: '5px',\n          zIndex: 0\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"real-time-indicator\",\n        style: realTimeStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-segments\",\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        },\n        children: generateSegments()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [Math.round(displayPercentage), \"% watched\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: '10px',\n          fontSize: '0.8em',\n          color: '#666'\n        },\n        children: [\"(\", (intervals === null || intervals === void 0 ? void 0 : intervals.length) || 0, \" intervals)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressBar, \"0i+oW8p8nr7lfwNyonrHAbFP2nw=\");\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ProgressBar","percentage","intervals","duration","currentTime","_s","displayPercentage","setDisplayPercentage","realTimeProgress","setRealTimeProgress","realTimePercentage","progressStyle","width","transition","realTimeStyle","position","left","height","backgroundColor","borderRadius","zIndex","generateSegments","length","console","log","map","interval","index","start","end","error","startPercent","widthPercent","segmentStyle","style","fileName","_jsxFileName","lineNumber","columnNumber","filter","Boolean","formatTime","seconds","minutes","Math","floor","remainingSeconds","toString","padStart","className","children","overflow","margin","top","round","marginLeft","fontSize","color","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Video-Progress-Tracker-main/video-progress-frontend-main/src/components/video/ProgressBar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst ProgressBar = ({ percentage, intervals, duration, currentTime }) => {\n  const [displayPercentage, setDisplayPercentage] = useState(0);\n  const [realTimeProgress, setRealTimeProgress] = useState(0);\n\n  // Update display percentage with animation\n  useEffect(() => {\n    setDisplayPercentage(percentage || 0);\n  }, [percentage]);\n\n  // Update real-time progress when currentTime changes\n  useEffect(() => {\n    if (currentTime && duration) {\n      const realTimePercentage = (currentTime / duration) * 100;\n      setRealTimeProgress(realTimePercentage);\n    }\n  }, [currentTime, duration]);\n\n  // Convert percentage to width style\n  const progressStyle = {\n    width: `${displayPercentage}%`,\n    transition: 'width 0.5s ease-in-out'\n  };\n\n  // Real-time progress indicator style\n  const realTimeStyle = {\n    position: 'absolute',\n    left: 0,\n    width: `${realTimeProgress}%`,\n    height: '100%',\n    backgroundColor: 'rgba(16, 185, 129, 0.7)', // Green color\n    borderRadius: '5px',\n    transition: 'width 0.1s linear',\n    zIndex: 2\n  };\n\n  // Generate segments for watched intervals\n  const generateSegments = () => {\n    if (!intervals || intervals.length === 0 || !duration) {\n      return null;\n    }\n\n    console.log('Generating segments for intervals:', intervals);\n\n    return intervals.map((interval, index) => {\n      if (typeof interval.start !== 'number' || typeof interval.end !== 'number') {\n        console.error('Invalid interval:', interval);\n        return null;\n      }\n\n      const startPercent = (interval.start / duration) * 100;\n      const widthPercent = ((interval.end - interval.start + 1) / duration) * 100;\n\n      console.log(`Segment ${index}: start=${startPercent}%, width=${widthPercent}%`);\n\n      const segmentStyle = {\n        position: 'absolute',\n        left: `${startPercent}%`,\n        width: `${widthPercent}%`,\n        height: '100%',\n        backgroundColor: 'rgba(63, 81, 181, 0.5)',\n        borderRadius: '5px',\n        zIndex: 1\n      };\n\n      return <div key={index} style={segmentStyle}></div>;\n    }).filter(Boolean);\n  };\n\n  // Format time from seconds to MM:SS\n  const formatTime = (seconds) => {\n    if (typeof seconds !== 'number') return '00:00';\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"progress-container\">\n      <div className=\"progress-bar\" style={{ position: 'relative', height: '10px', backgroundColor: '#e0e0e0', borderRadius: '5px', overflow: 'hidden', margin: '1rem 0' }}>\n        <div className=\"progress-bar-fill\" style={{ ...progressStyle, height: '100%', backgroundColor: '#3f51b5', borderRadius: '5px', zIndex: 0 }}></div>\n        <div className=\"real-time-indicator\" style={realTimeStyle}></div>\n        <div className=\"progress-segments\" style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          {generateSegments()}\n        </div>\n      </div>\n      <div className=\"progress-text\">\n        <span>{Math.round(displayPercentage)}% watched</span>\n        <span style={{ marginLeft: '10px', fontSize: '0.8em', color: '#666' }}>\n          ({intervals?.length || 0} intervals)\n        </span>\n\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}