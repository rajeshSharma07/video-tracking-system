{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Video-Progress-Tracker-main\\\\video-progress-frontend-main\\\\src\\\\contexts\\\\VideoContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { getAllVideos, getVideo as fetchSingleVideo } from '../services/videoService';\nimport { getVideoProgress as fetchVideoProgressService, updateProgress as updateProgressService, resetProgress as resetProgressService } from '../services/progressService';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoContext = /*#__PURE__*/createContext();\nexport const VideoProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  const [videos, setVideos] = useState([]);\n  const [currentVideo, setCurrentVideo] = useState(null);\n  const [progress, setProgress] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Helper function to map _id to id for frontend consistency\n  const mapVideoId = useCallback(video => {\n    if (video && video._id) {\n      return {\n        ...video,\n        id: video._id\n      };\n    }\n    return video;\n  }, []);\n\n  // Get all videos\n  const getVideos = useCallback(async () => {\n    setLoading(true);\n    try {\n      console.log('Fetching all videos');\n      const res = await getAllVideos();\n      console.log('Videos response:', res);\n      // Map _id to id for each video\n      const mappedVideos = res.data.map(mapVideoId); // <--- ADDED MAPPING HERE\n      setVideos(mappedVideos);\n      setError(null);\n      return mappedVideos; // Return mapped videos\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error fetching videos:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Error fetching videos');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, [mapVideoId]);\n\n  // Get single video\n  const getVideo = useCallback(async id => {\n    setLoading(true);\n    try {\n      console.log('Fetching video with ID:', id);\n      const res = await fetchSingleVideo(id);\n      console.log('Video response:', res);\n      // Map _id to id for the current video\n      const mappedCurrentVideo = mapVideoId(res.data); // <--- ADDED MAPPING HERE\n      setCurrentVideo(mappedCurrentVideo);\n\n      // If authenticated and progress data is returned, set it\n      // Ensure progress.videoId is also mapped if needed, or backend sends it as 'id'\n      if (isAuthenticated && res.progress) {\n        console.log('Setting progress from video response:', res.progress);\n        setProgress(res.progress); // Assuming progress.videoId matches the video's _id/id\n      } else if (isAuthenticated) {\n        // If authenticated but no progress data, try to fetch it separately\n        fetchVideoProgress(id); // Call local function\n      }\n      setError(null);\n      return {\n        ...res,\n        data: mappedCurrentVideo\n      }; // Return mapped video in the response\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Error fetching video:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Error fetching video');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated, mapVideoId]);\n\n  // Get user's progress for a video\n  const fetchVideoProgress = useCallback(async videoId => {\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping progress fetch');\n      return null;\n    }\n    try {\n      console.log('Fetching progress for video:', videoId);\n      const res = await fetchVideoProgressService(videoId);\n      console.log('Progress response:', res);\n      if (res.success && res.data) {\n        // Ensure progress.videoId is consistent with video.id\n        // If backend sends videoId as _id, it needs to be mapped here too\n        const mappedProgress = {\n          ...res.data,\n          videoId: res.data.videoId || res.data._id\n        }; // Handle potential _id on progress object\n        console.log('Setting progress from progress response:', mappedProgress);\n        setProgress(mappedProgress);\n        setError(null);\n        return mappedProgress;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error fetching progress:', err);\n      return null;\n    }\n  }, [isAuthenticated]);\n\n  // Update progress for a video\n  const updateProgress = useCallback(async (videoId, data) => {\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping progress update');\n      return null;\n    }\n    try {\n      console.log('Updating progress for video:', videoId, data);\n      const res = await updateProgressService(videoId, data);\n      console.log('Update progress response:', res);\n      if (res.success && res.data) {\n        const mappedProgress = {\n          ...res.data,\n          videoId: res.data.videoId || res.data._id\n        };\n        console.log('Setting progress from update response:', mappedProgress);\n        setProgress(mappedProgress);\n        setError(null);\n        return mappedProgress;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error updating progress:', err);\n      return null;\n    }\n  }, [isAuthenticated]);\n\n  // Reset progress for a video\n  const resetProgress = useCallback(async videoId => {\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping progress reset');\n      return null;\n    }\n    try {\n      console.log('Resetting progress for video:', videoId);\n      const res = await resetProgressService(videoId);\n      console.log('Reset progress response:', res);\n      if (res.success && res.data) {\n        const mappedProgress = {\n          ...res.data,\n          videoId: res.data.videoId || res.data._id\n        };\n        console.log('Setting progress from reset response:', mappedProgress);\n        setProgress(mappedProgress);\n        setError(null);\n        return mappedProgress;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error resetting progress:', err);\n      return null;\n    }\n  }, [isAuthenticated]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: {\n      videos,\n      currentVideo,\n      progress,\n      loading,\n      error,\n      getVideos,\n      getVideo,\n      getVideoProgress: fetchVideoProgress,\n      updateProgress,\n      resetProgress,\n      clearError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoProvider, \"PA1woGUj5Kk/hGfCFqNurBRi5zI=\");\n_c = VideoProvider;\nvar _c;\n$RefreshReg$(_c, \"VideoProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","getAllVideos","getVideo","fetchSingleVideo","getVideoProgress","fetchVideoProgressService","updateProgress","updateProgressService","resetProgress","resetProgressService","AuthContext","jsxDEV","_jsxDEV","VideoContext","VideoProvider","children","_s","isAuthenticated","videos","setVideos","currentVideo","setCurrentVideo","progress","setProgress","loading","setLoading","error","setError","mapVideoId","video","_id","id","getVideos","console","log","res","mappedVideos","data","map","err","_err$response","_err$response$data","response","message","mappedCurrentVideo","fetchVideoProgress","_err$response2","_err$response2$data","videoId","success","mappedProgress","clearError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Video-Progress-Tracker-main/video-progress-frontend-main/src/contexts/VideoContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { getAllVideos, getVideo as fetchSingleVideo } from '../services/videoService';\nimport { getVideoProgress as fetchVideoProgressService, updateProgress as updateProgressService, resetProgress as resetProgressService } from '../services/progressService';\nimport { AuthContext } from './AuthContext';\n\nexport const VideoContext = createContext();\n\nexport const VideoProvider = ({ children }) => {\n  const { isAuthenticated } = useContext(AuthContext);\n  const [videos, setVideos] = useState([]);\n  const [currentVideo, setCurrentVideo] = useState(null);\n  const [progress, setProgress] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Helper function to map _id to id for frontend consistency\n  const mapVideoId = useCallback((video) => {\n    if (video && video._id) {\n      return { ...video, id: video._id };\n    }\n    return video;\n  }, []);\n\n  // Get all videos\n  const getVideos = useCallback(async () => {\n    setLoading(true);\n    try {\n      console.log('Fetching all videos');\n      const res = await getAllVideos();\n      console.log('Videos response:', res);\n      // Map _id to id for each video\n      const mappedVideos = res.data.map(mapVideoId); // <--- ADDED MAPPING HERE\n      setVideos(mappedVideos);\n      setError(null);\n      return mappedVideos; // Return mapped videos\n    } catch (err) {\n      console.error('Error fetching videos:', err);\n      setError(err.response?.data?.message || 'Error fetching videos');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, [mapVideoId]);\n\n  // Get single video\n  const getVideo = useCallback(async (id) => {\n    setLoading(true);\n    try {\n      console.log('Fetching video with ID:', id);\n      const res = await fetchSingleVideo(id);\n      console.log('Video response:', res);\n      // Map _id to id for the current video\n      const mappedCurrentVideo = mapVideoId(res.data); // <--- ADDED MAPPING HERE\n      setCurrentVideo(mappedCurrentVideo);\n\n      // If authenticated and progress data is returned, set it\n      // Ensure progress.videoId is also mapped if needed, or backend sends it as 'id'\n      if (isAuthenticated && res.progress) {\n        console.log('Setting progress from video response:', res.progress);\n        setProgress(res.progress); // Assuming progress.videoId matches the video's _id/id\n      } else if (isAuthenticated) {\n        // If authenticated but no progress data, try to fetch it separately\n        fetchVideoProgress(id); // Call local function\n      }\n\n      setError(null);\n      return { ...res, data: mappedCurrentVideo }; // Return mapped video in the response\n    } catch (err) {\n      console.error('Error fetching video:', err);\n      setError(err.response?.data?.message || 'Error fetching video');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated, mapVideoId]);\n\n  // Get user's progress for a video\n  const fetchVideoProgress = useCallback(async (videoId) => {\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping progress fetch');\n      return null;\n    }\n\n    try {\n      console.log('Fetching progress for video:', videoId);\n      const res = await fetchVideoProgressService(videoId);\n      console.log('Progress response:', res);\n\n      if (res.success && res.data) {\n        // Ensure progress.videoId is consistent with video.id\n        // If backend sends videoId as _id, it needs to be mapped here too\n        const mappedProgress = { ...res.data, videoId: res.data.videoId || res.data._id }; // Handle potential _id on progress object\n        console.log('Setting progress from progress response:', mappedProgress);\n        setProgress(mappedProgress);\n        setError(null);\n        return mappedProgress;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error fetching progress:', err);\n      return null;\n    }\n  }, [isAuthenticated]);\n\n  // Update progress for a video\n  const updateProgress = useCallback(async (videoId, data) => {\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping progress update');\n      return null;\n    }\n\n    try {\n      console.log('Updating progress for video:', videoId, data);\n      const res = await updateProgressService(videoId, data);\n      console.log('Update progress response:', res);\n\n      if (res.success && res.data) {\n        const mappedProgress = { ...res.data, videoId: res.data.videoId || res.data._id };\n        console.log('Setting progress from update response:', mappedProgress);\n        setProgress(mappedProgress);\n        setError(null);\n        return mappedProgress;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error updating progress:', err);\n      return null;\n    }\n  }, [isAuthenticated]);\n\n  // Reset progress for a video\n  const resetProgress = useCallback(async (videoId) => {\n    if (!isAuthenticated) {\n      console.log('User not authenticated, skipping progress reset');\n      return null;\n    }\n\n    try {\n      console.log('Resetting progress for video:', videoId);\n      const res = await resetProgressService(videoId);\n      console.log('Reset progress response:', res);\n\n      if (res.success && res.data) {\n        const mappedProgress = { ...res.data, videoId: res.data.videoId || res.data._id };\n        console.log('Setting progress from reset response:', mappedProgress);\n        setProgress(mappedProgress);\n        setError(null);\n        return mappedProgress;\n      }\n      return null;\n    } catch (err) {\n      console.error('Error resetting progress:', err);\n      return null;\n    }\n  }, [isAuthenticated]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return (\n    <VideoContext.Provider\n      value={{\n        videos,\n        currentVideo,\n        progress,\n        loading,\n        error,\n        getVideos,\n        getVideo,\n        getVideoProgress: fetchVideoProgress,\n        updateProgress,\n        resetProgress,\n        clearError\n      }}\n    >\n      {children}\n    </VideoContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}